/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app.js":
/*!****************!*\
  !*** ./app.js ***!
  \****************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/index.js */ \"./src/index.js\");\n/* eslint-disable no-console */\n// test script for parent and child documents.\n\nvar sampleMessage = \"Encode this text please\";\n/**\r\n * Method for publishing on the page what we are encrypting\r\n *\r\n * @method output\r\n * @param {Object} cipher that we want to output\r\n * @param {String} section html tag to be used to represent this cipher\r\n * @return {nothing}\r\n */\n\nfunction output(cipher, section) {\n  //\tconsole.log(\"log:\", decrypted, encrypted);\n  var container = document.getElementById(section);\n  var content = document.createElement(\"div\");\n  content.setAttribute(\"id\", cipher.getMethod());\n  content.setAttribute(\"style\", \"margin-left: 50px\");\n  content.innerHTML = \"<h3>Encoding Text using: [\".concat(cipher.getMethod(), \"] encryption: </h3> <strong>Plaintext:</strong> \").concat(cipher.getMsg(), \" <br> <strong>Ciphertext:</strong> \").concat(cipher.encode(), \"<br>\");\n  container.appendChild(content);\n} // -----------------------------------------------------COLUMNAR-----------------------------------------------------\n// Enigma sample code\n\n\nvar newAmsco = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__[\"Columnar\"].Amsco(sampleMessage, \"321\");\noutput(newAmsco, \"Columnar\"); // -----------------------------------------------------DICTIONARY-----------------------------------------------------\n\nvar newAtbash = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__[\"Dictionary\"].Atbash(sampleMessage);\noutput(newAtbash, \"Dictionary\");\nnewAtbash.setMsg(\"0r2q10 lxwm l0hl  pt04m0\");\nnewAtbash.setEncoded(true);\nvar newAutokey = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__[\"Dictionary\"].Autokey(sampleMessage, \"Tyranosaurus\");\noutput(newAutokey, \"Dictionary\");\nvar newBaconian = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__[\"Dictionary\"].Baconian(sampleMessage);\noutput(newBaconian, \"Dictionary\");\nvar newBazeries = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__[\"Dictionary\"].Bazeries(\"simple substitution plus transposition\", \"Eighty one thousand two hundred fifty seven\");\noutput(newBazeries, \"Dictionary\");\nvar newMorse = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__[\"Dictionary\"].Morse(sampleMessage);\noutput(newMorse, \"Dictionary\");\nvar newSimpleSubstitution = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__[\"Dictionary\"].SimpleSubstitution(sampleMessage, \"Tyranosaurus\");\noutput(newSimpleSubstitution, \"Dictionary\"); // -----------------------------------------------------ENIGMA-----------------------------------------------------\n// Enigma sample code\n\nvar newMachine = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__[\"Enigma\"](sampleMessage);\noutput(newMachine, \"Enigma\"); // -----------------------------------------------------SHIFT-----------------------------------------------------\n\nvar newCaesar = new _src_index_js__WEBPACK_IMPORTED_MODULE_0__[\"Shift\"].CaesarShift(sampleMessage, 1);\noutput(newCaesar, \"Shift\");\nconsole.log(_src_index_js__WEBPACK_IMPORTED_MODULE_0__);\nmodule.exports = _src_index_js__WEBPACK_IMPORTED_MODULE_0__;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))\n\n//# sourceURL=webpack:///./app.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack:///(webpack)/buildin/harmony-module.js?");

/***/ }),

/***/ "./src/basicCipher.js":
/*!****************************!*\
  !*** ./src/basicCipher.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return BasicCipher; });\n/* eslint-disable no-unused-expressions */\n\n/* eslint-disable no-return-assign */\n\n/**\r\n * BasicCipher \r\n * Template class for creating new Ciphers, all I create extends this class.\r\n * In cryptography, a cipher (or cypher) is an algorithm for performing encryption or decryptionâ€”a series of well-defined steps that can be followed as a procedure. An alternative, less common term is encipherment. \r\n * To encipher or encode is to convert information into cipher or code. In common parlance, \"cipher\" is synonymous with \"code\", as they are both a set of steps that encrypt a message; \r\n * However, the concepts are distinct in cryptography, especially classical cryptography.\r\n * Codes generally substitute different length strings of character in the output, while ciphers generally substitute the same number of characters as are input. \r\n * There are exceptions and some cipher systems may use slightly more, or fewer, characters when output versus the number that were input.\r\n * https://en.wikipedia.org/wiki/Cipher\r\n * \r\n * @since 1.0.0\r\n * @method constructor\r\n * @param {String} message the message that is going to be processed by the cipher\r\n * @param {Boolean} encoded boolean indicating whether or not the message is encoded\r\n * @param {String} method a String that indicates which cipher is being used\r\n * @param {String} key when the cipher needs a key, we store it here\r\n * @param {Object} alphabet when the cipher needs an alphabet, we store it here albhabet is an array of key:value pairs\r\n * @param {Boolean} debug boolean indicating whether or not to display debug messages\r\n * @returns {Object} new cipher with all its properties and methods\r\n * @example \r\n * const myCipher = new BasicCipher(\"Texto to encode\",false,\"cool new methods name\",\"if theres a key\",\"if theres an alphabet\",false)\r\n \r\n */\nclass BasicCipher {\n  constructor(message, encoded, method, key, alphabet, debug) {\n    _initialiseProps.call(this);\n\n    this.message = message;\n    this.encoded = encoded;\n    this.method = method;\n    this.key = key || '';\n    this.alphabet = alphabet;\n    this.debug = debug;\n  } // --------------------------------------------------GETs--------------------------------------------------\n\n\n  // --------------------------------------------------SETs--------------------------------------------------\n\n  /**\r\n   * @method setMsg\r\n   * @param {String} newMessage message that we want to store in the cipher\r\n   */\n  setMsg(newMessage) {\n    return this.message = newMessage;\n  }\n  /**\r\n   * @method setEncoded\r\n   * @param {Boolean} newEncoded encoded is a boolean that indicates if the stored message is or not encoded\r\n   */\n\n\n  setEncoded(newEncoded) {\n    return this.encoded = newEncoded;\n  }\n  /**\r\n   * @method setMethod\r\n   * @param {String} newMethod \r\n   */\n\n\n  setMethod(newMethod) {\n    return this.method = newMethod;\n  }\n  /**\r\n   * @param setKey \r\n   * @param {String} newKey \r\n   */\n\n\n  setKey(newKey) {\n    return this.key = newKey;\n  }\n  /**\r\n   * @method setAlphabet\r\n   * @param {Object} newAlphabet [key:value]\r\n   */\n\n\n  setAlphabet(newAlphabet) {\n    return this.alphabet = newAlphabet;\n  } // ----------------------------------------------------Usefull methods----------------------------------------------------\n\n  /**\r\n   * Based upod Caesar shift method, works for letter only, any other character like 0-9 or @ # $, etc. will be ignored.\r\n   *\r\n   * @method shiftCharacters\r\n   * @param {String} String to be shifted\r\n   * @param {Number} shift indicates the number of characters the alphabet is to be rotated\r\n   * @returns {String} shifted text\r\n   * */\n\n\n  /**\r\n   * Sort values based on the first item on the row\r\n   * @method sortColumns\r\n   * @param {*} a \r\n   * @param {*} b \r\n   */\n  sortColumns(a, b) {\n    if (a[0] === b[0]) {\n      return 0;\n    }\n\n    return a[0] < b[0] ? -1 : 1;\n  }\n  /**\r\n   * Receives a 2D matrix and transposes it\r\n   * @method transposeMatrix\r\n   * @param {Array} matrix receives a 2D matrix and transposes it\r\n   * @returns {Array} \r\n   */\n\n\n}\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.getMsg = function () {\n    return _this.message;\n  };\n\n  this.getEncoded = function () {\n    return _this.encoded;\n  };\n\n  this.getMethod = function () {\n    return _this.method;\n  };\n\n  this.getKey = function () {\n    return _this.key;\n  };\n\n  this.getAlphabet = function () {\n    return _this.alphabet;\n  };\n\n  this.shiftCharacters = function (str) {\n    var shift = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var amount = shift;\n    Math.abs(amount) > 26 ? amount %= 26 : null;\n    amount < 0 ? amount += 26 : amount;\n    var output = '';\n\n    for (var i = 0; i < str.length; i += 1) {\n      var c = str[i]; // If it's a letter...\n\n      if (c.match(/[a-z]/i)) {\n        var code = str.charCodeAt(i);\n\n        if (code >= 65 && code <= 90) {\n          // Uppercase letters\n          var temp = c;\n          c = String.fromCharCode((code - 65 + amount) % 26 + 65); // console.log(temp, \"->\", c);\n        } else if (code >= 97 && code <= 122) {\n          // Lowercase letters\n          c = String.fromCharCode((code - 97 + amount) % 26 + 97);\n        }\n      } // Append\n\n\n      output += c;\n    }\n\n    return output;\n  };\n\n  this.text2block = function (text) {\n    var blockSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var str = text;\n    str = str.replace(/ /g, '');\n    var temp = str[0];\n    var index = 1;\n\n    do {\n      if (index % blockSize === 0) temp += ' ';\n      temp += str[index];\n      index += 1;\n    } while (index < str.length);\n\n    return temp;\n  };\n\n  this.encodeAlphabet = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var charSplit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var wordSplit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ' ';\n    var originalMessage = '';\n    var encodedMessage = ''; // originalMessage = this.message.toLowerCase().replace(/[^a-z]/g, \"\");\n\n    originalMessage = message.toLowerCase();\n    originalMessage.split(' ').map(function (word) {\n      word.split('').map(function (letter) {\n        var encodedChar = _this.getKeyByValue(_this.alphabet, letter);\n\n        encodedChar !== undefined ? encodedMessage += encodedChar + charSplit : null;\n      });\n      charSplit.length > 0 ? encodedMessage = encodedMessage.slice(0, -charSplit.length) : null;\n      encodedMessage += wordSplit;\n    });\n    wordSplit.length > 0 ? encodedMessage = encodedMessage.slice(0, -wordSplit.length) : null;\n    return encodedMessage;\n  };\n\n  this.decodeAlphabet = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var charSplit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var wordSplit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ' ';\n    var messageDecoded = '';\n    message.split(wordSplit).map(function (word) {\n      word.split(charSplit).map(function (letter) {\n        var encodedChar = _this.alphabet[letter];\n        encodedChar !== undefined ? messageDecoded += encodedChar : null;\n      });\n      messageDecoded += ' ';\n    });\n    messageDecoded = messageDecoded.slice(0, -1);\n    return messageDecoded;\n  };\n\n  this.validateEncoded = function () {\n    return _this.encoded === true && typeof (_this.message != null) && _this.message !== '';\n  };\n\n  this.transposeMatrix = function (array) {\n    return array[0].map(function (col, i) {\n      return array.map(function (row) {\n        return row[i];\n      });\n    });\n  };\n\n  this.getKeyByValue = function (object, value) {\n    return Object.keys(object).find(function (key) {\n      return object[key] === value;\n    });\n  };\n\n  this.logMessage = function (output) {\n    if (_this.debug) {// console.log(output);\n    }\n  };\n\n  this.test = function () {\n    return 'NigmaJS enabled';\n  };\n};\n\n//# sourceURL=webpack:///./src/basicCipher.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default, BasicCipher, Columnar, Dictionary, Shift, Enigma */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Nigma; });\n/* harmony import */ var _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basicCipher.js */ \"./src/basicCipher.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BasicCipher\", function() { return _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _languageAnalysis_analysis_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageAnalysis/analysis.js */ \"./src/languageAnalysis/analysis.js\");\n/* harmony import */ var _methods_columnar_columnar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./methods/columnar/columnar.js */ \"./src/methods/columnar/columnar.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Columnar\", function() { return _methods_columnar_columnar_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _methods_dictionary_dictionary_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./methods/dictionary/dictionary.js */ \"./src/methods/dictionary/dictionary.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Dictionary\", function() { return _methods_dictionary_dictionary_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _methods_shift_shift_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./methods/shift/shift.js */ \"./src/methods/shift/shift.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Shift\", function() { return _methods_shift_shift_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n/* harmony import */ var _methods_enigma_enigma_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./methods/enigma/enigma.js */ \"./src/methods/enigma/enigma.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Enigma\", function() { return _methods_enigma_enigma_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; });\n\n\n\n\n\n\n\n/** \r\n * Nigma Class, is a super class that uses all available methods in this library, it imports everything so that it can any method can be called from here.\r\n * It has 2 uses: 1) Access all methods and 2) Add criptoanalysis methods to the library.\r\n * As a way of simplifying the implementation, the different methods are all grouped in the corresponding JS files with the same name as the folder that contains them.\r\n * Therefore imports are-> COLUMNAR, SHIFT and DICTIONARY methods.\r\n * \r\n * @method constructor\r\n * @param {String} message\r\n * @returns {Object} An Object with access to all nigmaJS classes\r\n*/\n\nclass Nigma {\n  constructor() {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    _initialiseProps.call(this);\n\n    this.testMessages = ['abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'Las dos jornadas tuvieron un denominador comÃºn: insistir, y mucho, en educar en temas financieros, a los efectos de que la gente tenga claro cuÃ¡les son las ventajas y riesgos a los que se enfrenta.', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi dapibus suscipit velit vitae vulputate. Vivamus vel tempus lacus. Fusce dictum, leo id porttitor dapibus, leo diam rutrum nulla, ut feugiat', 'La posiciÃ³n de Washington hacia las elecciones en Palestina ha sido coherente. Las elecciones fueron postergadas hasta la muerte de Yasser Arafat, que fue recibida como una oportunidad para la realizaciÃ³n  '];\n    this.message = message;\n    this.alphabet = {\n      a: '',\n      b: '',\n      c: '',\n      d: '',\n      e: '',\n      f: '',\n      g: '',\n      h: '',\n      i: '',\n      j: '',\n      k: '',\n      l: '',\n      m: '',\n      n: '',\n      o: '',\n      p: '',\n      q: '',\n      r: '',\n      s: '',\n      t: '',\n      u: '',\n      v: '',\n      w: '',\n      x: '',\n      y: '',\n      z: '',\n      '0': '0',\n      '1': '1',\n      '2': '2',\n      '3': '3',\n      '4': '4',\n      '5': '5',\n      '6': '6',\n      '7': '7',\n      '8': '8',\n      '9': '9',\n      ' ': ' ',\n      '.': '.',\n      ',': ',',\n      '?': '?',\n      '!': '!'\n    };\n  } // -------------------------------------------Dictionary Criptoanalysis Methods -------------------------------------------\n\n\n}\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.getTestMessage = function (number) {\n    return _this.testMessages[number];\n  };\n\n  this.getChar = function (cipheredChar) {\n    return _this.alphabet[cipheredChar];\n  };\n\n  this.setChar = function (cipheredChar, decodedChar) {\n    _this.alphabet[cipheredChar] = decodedChar; // console.log(`Derypting \"${cipheredChar}\" as  \"${decodedChar}\" :\\n ${this.processMessage()}\\n`);\n\n    return _this.processMessage();\n  };\n\n  this.resetAlphabet = function () {\n    Object.keys(_this.alphabet).map(function (key, index) {\n      return _this.alphabet[key] = key;\n    });\n    return _this.processMessage();\n  };\n\n  this.swapChar = function (char1, char2) {\n    // Receives 2 keys and swaps their values in the alphabet, since we are testing the script it also updates the text.\n    var tempChar = _this.alphabet[char1];\n    _this.alphabet[char1] = _this.alphabet[char2];\n    _this.alphabet[char2] = tempChar;\n    return _this.processMessage();\n  };\n\n  this.setByFrequency = function () {\n    /* The method takes the analyzed text alphabet and compares it with the default language frequency reference. \r\n      This way we have a start but notice that it works in a very unefficient way */\n    var sortedRefFreq = _this.sortProperties(_this.freqAnalysis(_this.message));\n\n    var sortedMsgFreq = _this.sortProperties(_this.getSLFreq());\n\n    var index = 0;\n\n    do {\n      // sortedMsgFreq[index][0] = sortedRefFreq[index][0];\n      _this.setChar(String(sortedMsgFreq[index][0]).toLowerCase(), String(sortedRefFreq[index][0]).toLowerCase());\n\n      index += 1;\n    } while (index < sortedRefFreq.length - 1); // console.table(sortedMsgFreq);\n\n\n    return _this.processMessage();\n  };\n\n  this.processMessage = function () {\n    // Using the generated alphabet, the ciphered text is processed in an anttempt to decode it.\n    var decodedMessage = '';\n\n    var temp = _this.message.split('');\n\n    temp.forEach(function (element) {\n      var decodedChar = _this.alphabet[element];\n      decodedChar !== '' ? decodedMessage += decodedChar : decodedMessage += '?';\n    });\n    return decodedMessage;\n  };\n\n  this.getSLFreq = function () {\n    return _languageAnalysis_analysis_js__WEBPACK_IMPORTED_MODULE_1__[\"spanishLetterFrequencies\"];\n  };\n\n  this.getS2Freq = function () {\n    return _languageAnalysis_analysis_js__WEBPACK_IMPORTED_MODULE_1__[\"spanishBigramFrequencies\"];\n  };\n\n  this.getS3Freq = function () {\n    return _languageAnalysis_analysis_js__WEBPACK_IMPORTED_MODULE_1__[\"spanishTrigramFrequencies\"];\n  };\n\n  this.getS4req = function () {\n    return _languageAnalysis_analysis_js__WEBPACK_IMPORTED_MODULE_1__[\"spanishQuadgramFrequencies\"];\n  };\n\n  this.freqAnalysis = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    // Take all of the characters inside of a text and return an array with this characters as a % of the total\n    var pseudoAlphabet = {};\n    var auxText = message.split(''); // console.log(\"Frec. analysis\");\n\n    auxText.forEach(function (charElement) {\n      if (charElement in pseudoAlphabet) {\n        pseudoAlphabet[charElement] += 1;\n      } else {\n        pseudoAlphabet[charElement] = 1;\n      }\n    });\n    var totalChars = auxText.length;\n    /*\r\n    for (const [key, value] of Object.entries(pseudoAlphabet)) {\r\n    \t// Convert the number of repetitions into a %\r\n    \tpseudoAlphabet[key] = parseFloat(((value / totalChars) * 100).toFixed(3));\r\n    } */\n\n    Object.keys(pseudoAlphabet).forEach(function (key) {\n      var value = pseudoAlphabet[key];\n      pseudoAlphabet[key] = parseFloat((value / totalChars * 100).toFixed(3));\n    }); // console.log(pseudoAlphabet);\n\n    return pseudoAlphabet;\n  };\n\n  this.sortProperties = function (myArray) {\n    var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'desc';\n    // Take an Object with Key:vlaue pairs and return an array ordered according to the order parameter\n    var sortable = [];\n    myArray.forEach(function (element) {\n      sortable.push([element, myArray[element]]);\n    });\n    order === 'asc' ? sortable.sort(function (a, b) {\n      return a[1] - b[1];\n    }) : sortable.sort(function (a, b) {\n      return b[1] - a[1];\n    });\n    return sortable;\n  };\n};\n\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/languageAnalysis/analysis.js":
/*!******************************************!*\
  !*** ./src/languageAnalysis/analysis.js ***!
  \******************************************/
/*! exports provided: spanishLetterFrequencies, spanishBigramFrequencies, spanishTrigramFrequencies, spanishQuadgramFrequencies */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"spanishLetterFrequencies\", function() { return spanishLetterFrequencies; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"spanishBigramFrequencies\", function() { return spanishBigramFrequencies; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"spanishTrigramFrequencies\", function() { return spanishTrigramFrequencies; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"spanishQuadgramFrequencies\", function() { return spanishQuadgramFrequencies; });\nvar spanishLetterFrequencies = {\n  A: 12.5,\n  K: 0.08,\n  T: 4.42,\n  B: 1.27,\n  L: 5.84,\n  U: 4.0,\n  C: 4.43,\n  M: 2.61,\n  V: 0.98,\n  D: 5.14,\n  N: 7.09,\n  W: 0.03,\n  E: 13.24,\n  Ã‘: 0.22,\n  X: 0.19,\n  F: 0.79,\n  O: 8.98,\n  Y: 0.79,\n  G: 1.17,\n  P: 2.75,\n  Z: 0.42,\n  H: 0.81,\n  Q: 0.83,\n  I: 6.91,\n  R: 6.62,\n  J: 0.45,\n  S: 7.44\n};\nvar spanishBigramFrequencies = {\n  DE: 2.57,\n  AD: 1.43,\n  TA: 1.09,\n  ES: 2.31,\n  AR: 1.43,\n  TE: 1.0,\n  EN: 2.27,\n  RE: 1.42,\n  OR: 0.98,\n  EL: 2.01,\n  AL: 1.33,\n  DO: 0.98,\n  LA: 1.8,\n  AN: 1.24,\n  IO: 0.98,\n  OS: 1.79,\n  NT: 1.22,\n  AC: 0.96,\n  ON: 1.61,\n  UE: 1.21,\n  ST: 0.95,\n  AS: 1.56,\n  CI: 1.15,\n  NA: 0.92,\n  ER: 1.52,\n  CO: 1.13,\n  RO: 0.85,\n  RA: 1.47,\n  SE: 1.11,\n  UN: 0.84\n};\nvar spanishTrigramFrequencies = {\n  DEL: 0.75,\n  EST: 0.48,\n  PAR: 0.32,\n  QUE: 0.74,\n  LOS: 0.47,\n  DES: 0.31,\n  ENT: 0.67,\n  ODE: 0.47,\n  ESE: 0.3,\n  ION: 0.56,\n  ADO: 0.45,\n  IEN: 0.3,\n  ELA: 0.55,\n  RES: 0.4,\n  ALA: 0.29,\n  CON: 0.54,\n  STA: 0.38,\n  POR: 0.29,\n  SDE: 0.52,\n  ACI: 0.36,\n  ONE: 0.29,\n  ADE: 0.51,\n  LAS: 0.35,\n  NDE: 0.29,\n  CIO: 0.5,\n  ARA: 0.34,\n  TRA: 0.28,\n  NTE: 0.49,\n  ENE: 0.32,\n  NES: 0.27\n};\nvar spanishQuadgramFrequencies = {\n  CION: 0.42,\n  MENT: 0.16,\n  NCIA: 0.14,\n  DELA: 0.33,\n  IONE: 0.16,\n  AQUE: 0.14,\n  ACIO: 0.27,\n  ODEL: 0.16,\n  SQUE: 0.14,\n  ENTE: 0.25,\n  ONDE: 0.16,\n  ENCI: 0.13,\n  ESTA: 0.22,\n  OQUE: 0.15,\n  ENLA: 0.13,\n  ESDE: 0.22,\n  IDAD: 0.15,\n  ENTR: 0.13,\n  PARA: 0.19,\n  ELOS: 0.15,\n  IENT: 0.12,\n  ONES: 0.17,\n  ADEL: 0.15,\n  ASDE: 0.12,\n  SDEL: 0.17,\n  ANTE: 0.15,\n  ENEL: 0.12,\n  OSDE: 0.17,\n  ENTO: 0.14,\n  DELO: 0.12\n}; // export default BasicCipher;\n\n//# sourceURL=webpack:///./src/languageAnalysis/analysis.js?");

/***/ }),

/***/ "./src/methods/columnar/amsco.js":
/*!***************************************!*\
  !*** ./src/methods/columnar/amsco.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return amsco; });\n/* harmony import */ var _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../basicCipher.js */ \"./src/basicCipher.js\");\n\n/** Class representation of the AMSCO method \r\n * http://ericbrandel.com/2016/10/09/the-amsco-cipher/\r\n * AMSCO is an incomplete columnar transposition cipher. A bit to unpack there, but basically that means that youâ€™re putting\r\n * the message into columns and those columns may not have equal lengths. It was invented by an A.M. Scott in the 19th century, \r\n * but strangely there is almost nothing online about him.\r\n * Suitable length: 8 to 12 lines  maximum\r\n * The key can be a max length of 9 and must contain the numbers 1-n, with n being the length of the key. \r\n * 1234 and 4132 would both be valid keys, but 1245 would not.\r\n * \r\n * @method constructor\r\n * @param {String} message to be encoded/decoded\r\n * @param {String} key the order in which to sort columns\r\n * @param {Boolean} encoded indicating if the message passed is encoded\r\n * @param {Boolean} debug indicating if we need to print debug messages\r\n*/\n\nclass amsco extends _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(message, key) {\n    var encoded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    super(message, encoded, 'amsco', key, '', debug);\n\n    _initialiseProps.call(this);\n  }\n  /**\r\n   * Method that returns all auxiliary info required in order to implement the decoding process.\r\n   * It generates both the template for the decoded message and the decoding matrix to be used.\r\n   * It's important to notice that the key is placed inside of the template message and must be removed once the columns are sorted.\r\n   * @method decodingConstructor\r\n   * @param {String} message the message to be encoded\r\n   * @param {String} key the order in which columnar transposition is to be made\r\n   * @returns {[String,Array,Array]} [decodedMessageTemplate, decodingMatrix, explodedKey]\r\n   */\n\n\n}\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.decodingConstructor = function (message, key) {\n    var explodedKey = key.split('').map(function (myval) {\n      return myval - 1;\n    });\n    var decodedMessageTemplate = [];\n    explodedKey.map(function (value) {\n      decodedMessageTemplate.push([value]);\n    });\n\n    var decodingMatrix = _this.generateDecodingMatrix(message.length, explodedKey, 1, 2);\n\n    return [decodedMessageTemplate, decodingMatrix, explodedKey];\n  };\n\n  this.validateKey = function () {\n    // /Aux method that verifies if no columns in [1,2...n] are present and if all 1-9 digits are there\n    var validated = true;\n\n    var explodedKey = _this.key.split('').sort();\n\n    var pattern = /^\\d+$/;\n\n    _this.logMessage(\"Check for [0-9] chars only: \".concat(pattern.test(_this.key), \" key analyzed : \").concat(_this.key));\n\n    if (pattern.test(_this.key)) {\n      _this.logMessage(\"Numbers only Key: \".concat(explodedKey, \" \"));\n\n      var index = 0;\n\n      do {\n        var element = explodedKey[index];\n\n        _this.logMessage(\"Validating ... Char \".concat(element, \" of type \").concat(typeof element, \" at \").concat(index));\n\n        element === (1 + index).toString() ? index += 1 : (validated = false, _this.logMessage('Sequence not validated'));\n      } while (validated === true && index < explodedKey.length); // validated ? console.log(\"\") : this.logMessage(\"Invalid Key sequence\");\n\n    } else {\n      _this.logMessage('Invlaid key, Non numbers detected');\n\n      validated = false;\n    }\n\n    return validated;\n  };\n\n  this.generateDecodingMatrix = function (totalChars, splitKey, initChar, alternateChar) {\n    var decodingMatrix = [];\n    var numChars = initChar || 1;\n    var alternate = alternateChar || 2;\n    var explodedKey = splitKey;\n    explodedKey.map(function (value) {\n      decodingMatrix.push([]);\n    }); // Build decoding Matrix\n\n    var index = 0;\n\n    do {\n      decodingMatrix.forEach(function (element) {\n        if (index < totalChars) {\n          totalChars - index > numChars ? element.push(numChars) : element.push(totalChars - index);\n        } else {\n          element.push(0);\n        }\n\n        index += numChars;\n        numChars = numChars === initChar ? alternate : initChar;\n      });\n      numChars = numChars === initChar ? alternate : initChar;\n    } while (index < totalChars);\n\n    return decodingMatrix;\n  };\n\n  this.processMatrixDecoding = function (message, matrix, splitKey) {\n    var index = 0;\n    var extraChars = 1;\n    var keys = 0;\n    var messageDecoded = message;\n    var decodingMatrix = matrix;\n    var explodedKey = splitKey;\n\n    do {\n      var subIndex = 0;\n      var key = explodedKey.indexOf(keys);\n\n      do {\n        extraChars = index + decodingMatrix[key][subIndex];\n\n        var element = _this.message.slice(index, extraChars);\n\n        messageDecoded[key].push(element);\n        index = extraChars;\n        subIndex += 1;\n      } while (subIndex < decodingMatrix[key].length);\n\n      keys += 1;\n    } while (keys < decodingMatrix.length);\n\n    return messageDecoded;\n  };\n\n  this.decode = function () {\n    var messageDecoded = []; // In order to encode a message first we validate that the message is encoded, that it's not null and that the string is not empty.\n\n    if (_this.validateKey()) {\n      var decodingAux = _this.decodingConstructor(_this.message, _this.key);\n\n      messageDecoded = _this.processMatrixDecoding(decodingAux[0], decodingAux[1], decodingAux[2]); // Now all the text is ordered but in separate colums/rows\n\n      messageDecoded = _this.transposeMatrix(messageDecoded);\n      messageDecoded.shift();\n      messageDecoded = messageDecoded.map(function (row) {\n        return row.join('');\n      });\n      messageDecoded = messageDecoded.join(''); // messageDecoded.sort(this.sortFunction);\n\n      _this.logMessage(\"Done decoding: \".concat(messageDecoded));\n    } else {// console.log(\"Unable to decode, verify if message was already encrypted\");\n    }\n\n    return messageDecoded;\n  };\n\n  this.encode = function () {\n    var originalMessage = '';\n    var encodedMessage = [];\n    var encodingMatrix = [];\n    var output = '';\n\n    if (_this.validateKey()) {\n      // Eliminate non usable chars\n      originalMessage = _this.message.replace(/\\s+/g, '').toLocaleUpperCase(); // Call the constructor\n\n      var decodingAux = _this.decodingConstructor(_this.message, _this.key); // Returns > [messageTemplate,matrix,splitKey]\n      // Use the values from the constructor\n\n\n      [encodedMessage] = decodingAux;\n      encodingMatrix = _this.transposeMatrix(decodingAux[1]); // Using the matrix split the original message into chunks\n\n      var textIndex = 0;\n      var colIndex = 0;\n      encodingMatrix.forEach(function (row) {\n        row.forEach(function (column) {\n          encodedMessage[colIndex].push(originalMessage.slice(textIndex, textIndex + column));\n          textIndex += column;\n          colIndex < row.length - 1 ? colIndex += 1 : colIndex = 0;\n        });\n      });\n      encodedMessage.sort(_this.sortFunction);\n      encodedMessage.forEach(function (element) {\n        element.shift(); // Remove the first item since it contains key value\n\n        output += element.join('');\n      });\n    } // this.encoded = true;\n\n\n    return output;\n  };\n};\n\n//# sourceURL=webpack:///./src/methods/columnar/amsco.js?");

/***/ }),

/***/ "./src/methods/columnar/columnar.js":
/*!******************************************!*\
  !*** ./src/methods/columnar/columnar.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _amsco_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./amsco.js */ \"./src/methods/columnar/amsco.js\");\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  Amsco: _amsco_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n});\n\n//# sourceURL=webpack:///./src/methods/columnar/columnar.js?");

/***/ }),

/***/ "./src/methods/dictionary/atbash.js":
/*!******************************************!*\
  !*** ./src/methods/dictionary/atbash.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return atbash; });\n/* harmony import */ var _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../basicCipher.js */ \"./src/basicCipher.js\");\n\n/**\r\n * Atbash is a monoalphabetic substitution cipher originally used to encrypt the Hebrew alphabet. \r\n * It can be modified for use with any known writing system with a standard collating order.\r\n * @method constructor\r\n * @param {String} message to be encoded/decoded\r\n * @param {Boolean} encoded indicating if the message passed is encoded, default set to false\r\n * @param {Boolean} debug indicating if we need to print debug messages, default set to false\r\n */\n\nclass atbash extends _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(message) {\n    var encoded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var alphabet = {\n      '4': 'a',\n      '3': 'b',\n      '2': 'c',\n      '1': 'd',\n      '0': 'e',\n      z: 'f',\n      y: 'g',\n      x: 'h',\n      w: 'i',\n      v: 'j',\n      u: 'k',\n      t: 'l',\n      s: 'm',\n      r: 'n',\n      q: 'o',\n      p: 'p',\n      o: 'q',\n      n: 'r',\n      m: 's',\n      l: 't',\n      k: 'u',\n      j: 'v',\n      i: 'w',\n      h: 'x',\n      g: 'y',\n      f: 'z',\n      e: '0',\n      d: '1',\n      c: '2',\n      b: '3',\n      a: '4',\n      '!': '5',\n      '?': '6',\n      ',': '7',\n      '.': '8',\n      ' ': '9',\n      '9': ' ',\n      '8': '.',\n      '7': ',',\n      '6': '?',\n      '5': '!'\n    };\n    super(message, encoded, 'atbash', '', alphabet, debug);\n\n    _initialiseProps.call(this);\n\n    this.wordSep = ' ';\n    this.characterSep = ''; // Parametros: message,encoded,method,key,alphabet\n    // constructor(message, encoded, method, key, alphabet, debug)\n    // logMessage(\"constuctor\",this);\n  }\n  /**\r\n   * @method encode\r\n   * @param message text to be encoded, if empty use sotred message\r\n   */\n\n\n}\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.encode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    return _this.encodeAlphabet(message, _this.characterSep, _this.wordSep);\n  };\n\n  this.decode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    return _this.decodeAlphabet(message, _this.characterSep, _this.wordSep);\n  };\n};\n\n//# sourceURL=webpack:///./src/methods/dictionary/atbash.js?");

/***/ }),

/***/ "./src/methods/dictionary/autoKey.js":
/*!*******************************************!*\
  !*** ./src/methods/dictionary/autoKey.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return AutoKey; });\n/* harmony import */ var _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../basicCipher.js */ \"./src/basicCipher.js\");\n\n/**\r\n * This method implements a polialphabet substitution, but instead of generating a Matrix we use a formula that does the same but faster.\r\n * An autokey cipher (also known as the autoclave cipher) is a cipher that incorporates the message (the plaintext) into the key.\r\n * The key is generated from the message in some automated fashion, sometimes by selecting certain letters from the text or, more commonly,\r\n * by adding a short primer key to the front of the message.\r\n *\r\n * @method constructor\r\n * @param {String} message this text is what we want to get encoded/decoded\r\n * @param {String} key a text that is used to generate the alphabet\r\n */\n\nclass AutoKey extends _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(message, key, encoded, debug) {\n    super(message, encoded, \"autoKey\", key, \"\", debug);\n    /*\r\n        A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\r\n        ---------------------------------------------------\r\n    A   A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\r\n    B   B C D E F G H I J K L M N O P Q R S T U V W X Y Z A\r\n    C   C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\r\n    D   D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\r\n    E   E F G H I J K L M N O P Q R S T U V W X Y Z A B C D\r\n    F   F G H I J K L M N O P Q R S T U V W X Y Z A B C D E\r\n    G   G H I J K L M N O P Q R S T U V W X Y Z A B C D E F\r\n    H   H I J K L M N O P Q R S T U V W X Y Z A B C D E F G\r\n    I   I J K L M N O P Q R S T U V W X Y Z A B C D E F G H\r\n    J   J K L M N O P Q R S T U V W X Y Z A B C D E F G H I\r\n    K   K L M N O P Q R S T U V W X Y Z A B C D E F G H I J\r\n    L   L M N O P Q R S T U V W X Y Z A B C D E F G H I J K\r\n    M   M N O P Q R S T U V W X Y Z A B C D E F G H I J K L\r\n    N   N O P Q R S T U V W X Y Z A B C D E F G H I J K L M\r\n    O   O P Q R S T U V W X Y Z A B C D E F G H I J K L M N\r\n    P   P Q R S T U V W X Y Z A B C D E F G H I J K L M N O\r\n    Q   Q R S T U V W X Y Z A B C D E F G H I J K L M N O P\r\n    R   R S T U V W X Y Z A B C D E F G H I J K L M N O P Q\r\n    S   S T U V W X Y Z A B C D E F G H I J K L M N O P Q R\r\n    T   T U V W X Y Z A B C D E F G H I J K L M N O P Q R S\r\n    U   U V W X Y Z A B C D E F G H I J K L M N O P Q R S T\r\n    V   V W X Y Z A B C D E F G H I J K L M N O P Q R S T U\r\n    W   W X Y Z A B C D E F G H I J K L M N O P Q R S T U V\r\n    X   X Y Z A B C D E F G H I J K L M N O P Q R S T U V W\r\n    Y   Y Z A B C D E F G H I J K L M N O P Q R S T U V W X\r\n    Z   Z A B C D E F G H I J K L M N O P Q R S T U V W X Y\r\n      */\n\n    _initialiseProps.call(this);\n  }\n  /**\r\n   * @method encode\r\n   * @param {String} message text to use for encoding, if empty use stored message\r\n   * @param {String} key key to use for encoding, if empty use stored key\r\n   */\n\n\n}\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.encode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var myKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n    var plaintext = message.toLowerCase().replace(/[^a-z]/g, \"\");\n    var key = myKey.toLowerCase().replace(/[^a-z]/g, \"\");\n    var ciphertext = \"\";\n\n    if (plaintext.length >= 1 && key.length > 1) {\n      for (var i = 0; i < plaintext.length; i += 1) {\n        if (i < key.length) {\n          ciphertext += String.fromCharCode((plaintext.charCodeAt(i) - 97 + (key.charCodeAt(i) - 97) + 26) % 26 + 97);\n        } else {\n          ciphertext += String.fromCharCode((plaintext.charCodeAt(i) - 97 + (plaintext.charCodeAt(i - key.length) - 97) + 26) % 26 + 97);\n        }\n      }\n    }\n\n    return ciphertext;\n  };\n\n  this.decode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var myKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n    var ciphertext = message.toLowerCase().replace(/[^a-z]/g, \"\");\n    var key = myKey.toLowerCase().replace(/[^a-z]/g, \"\");\n    var plaintext = \"\";\n\n    if (ciphertext.length > 1 && key.length > 1) {\n      for (var i = 0; i < ciphertext.length; i += 1) {\n        if (i < key.length) {\n          plaintext += String.fromCharCode((ciphertext.charCodeAt(i) - 97 - (key.charCodeAt(i) - 97) + 26) % 26 + 97);\n        } else {\n          plaintext += String.fromCharCode((ciphertext.charCodeAt(i) - 97 - (plaintext.charCodeAt(i - key.length) - 97) + 26) % 26 + 97);\n        }\n      }\n    }\n\n    return plaintext;\n  };\n};\n\n//# sourceURL=webpack:///./src/methods/dictionary/autoKey.js?");

/***/ }),

/***/ "./src/methods/dictionary/baconian.js":
/*!********************************************!*\
  !*** ./src/methods/dictionary/baconian.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return baconian; });\n/* harmony import */ var _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../basicCipher.js */ \"./src/basicCipher.js\");\n\n/**\r\n * Bacon's cipher or the Baconian cipher is a method of steganography (a method of hiding a secret message as opposed to just a cipher)\r\n * devised by Francis Bacon in 1605.[1][2][3] A message is concealed in the presentation of text, rather than its content.\r\n * Subsitution alphabet\r\n * Suitable length: 25 characters maximum\r\n * https://en.wikipedia.org/wiki/Bacon%27s_cipher\r\n *\r\n * @method constructor\r\n * @param {String} message text to be encoded/decoded\r\n * @param {Boolean} encoded optional value that indicates if the message is already encoded\r\n * @param {Boolean} debug optional value used to show/ debug messages\r\n */\n\nclass baconian extends _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(message) {\n    var encoded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var alphabet = {\n      // In some versions UV or IJ are together, if needed this can be adjusted.\n      aaaaa: \"a\",\n      aaaab: \"b\",\n      aaaba: \"c\",\n      aaabb: \"d\",\n      aabaa: \"e\",\n      aabab: \"f\",\n      aabba: \"g\",\n      aabbb: \"h\",\n      abaaa: \"i\",\n      abaab: \"j\",\n      ababa: \"k\",\n      ababb: \"l\",\n      abbaa: \"m\",\n      abbab: \"n\",\n      abbba: \"o\",\n      abbbb: \"p\",\n      baaaa: \"q\",\n      baaab: \"r\",\n      baaba: \"s\",\n      baabb: \"t\",\n      babaa: \"u\",\n      babab: \"v\",\n      babba: \"w\",\n      babbb: \"x\",\n      bbaaa: \"y\",\n      bbaab: \"z\"\n    };\n    super(message, encoded, \"baconian\", \"\", alphabet, debug); // Parametros: message,encoded,method,key,alphabet\n    // WE have no key but we do have an alphabet\n    // this.decode.bind(this);\n    // logMessage(\"constuctor\",this);\n\n    _initialiseProps.call(this);\n\n    this.wordSep = \"   \";\n    this.characterSep = \" \";\n  }\n  /**\r\n   * @method encode\r\n   * @param {String} message text to use for encoding, if empty use stored message\r\n   */\n\n\n} // export default baconian;\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.encode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    return _this.encodeAlphabet(message, _this.characterSep, _this.wordSep);\n  };\n\n  this.decode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    return _this.decodeAlphabet(message, _this.characterSep, _this.wordSep);\n  };\n};\n\n//# sourceURL=webpack:///./src/methods/dictionary/baconian.js?");

/***/ }),

/***/ "./src/methods/dictionary/bazeries.js":
/*!********************************************!*\
  !*** ./src/methods/dictionary/bazeries.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Bazeries; });\n/* harmony import */ var _simpleSubstitution_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./simpleSubstitution.js */ \"./src/methods/dictionary/simpleSubstitution.js\");\n\n/**\r\n * Bazeries is a 5x5 substitution matrix, the simple substitution must be transpositioned before it can be used.\r\n * For this, after different tests, i decided to go for List -> matrix -> transposition -> List.\r\n * At first it seemed awfull but it turned out to be the most scalable solution.\r\n * @method constructor\r\n * @param {String} message this text is what we want to get encoded/decoded\r\n * @param {String} key a text that is used to generate the alphabet\r\n * @param {Boolean} encoded optional value that indicates if the message is already encoded\r\n * @param {Boolean} debug optional value used to show/ debug messages\r\n */\n\nclass Bazeries extends _simpleSubstitution_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(message, key) {\n    var encoded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var alphabet = {// In some versions IJ are together, if needed this can be adjusted.\n    };\n    super(message, key, true, false, encoded, \"\", alphabet, debug); // Parametros: message,encoded,method,key,alphabet\n\n    _initialiseProps.call(this);\n\n    this.method = \"bazeries\";\n    this.wordSep = \" \";\n    this.characterSep = \"\";\n    this.transpositionAlphabet(5, 5);\n  }\n  /**\r\n   * Since Bazeries is basically a substitution cipher with a 90deg rotation, we need to rotate the alphabet.\r\n   * This is an auxiliary method that is called only with the constructor.\r\n   * If the alphabet is changed, we might have to use it again.\r\n   * @method transposeMatrix\r\n   * @param {!number} rows number of rows\r\n   * @param {!number} columns number of columns\r\n   */\n\n\n}\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.transpositionAlphabet = function (rows, columns) {\n    var rotatedAlphabet = _this.alphabet;\n    var alphabetMatrix = [];\n    var row = []; // Create the matrix\n\n    Object.keys(rotatedAlphabet).forEach(function (key) {\n      var tempChar = key.charCodeAt(0); // wE ONLY CARE for chars Between A-Z, ignore all others\n\n      if (tempChar >= 97 && key.charCodeAt(0) <= 123) {\n        row.push(rotatedAlphabet[key]); // if (tempChar === \"j\") console.log(\"bug\");\n      } // Check if the row is complete and append into matrix\n\n\n      if (row.length === columns) {\n        alphabetMatrix.push(row);\n        row = [];\n      }\n    }); // Transpose\n\n    alphabetMatrix = _this.transposeMatrix(alphabetMatrix); // Merge into 1 array\n\n    alphabetMatrix = alphabetMatrix.join(); // Put values back into the alphabet as {key:value}\n\n    var asciiCode = 97;\n    alphabetMatrix.split(\",\").forEach(function (letter) {\n      rotatedAlphabet[String.fromCharCode(asciiCode)] = letter;\n      asciiCode += 1;\n    });\n\n    _this.setAlphabet(rotatedAlphabet);\n  };\n\n  this.encode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    return _this.encodeAlphabet(message, _this.characterSep, _this.wordSep);\n  };\n\n  this.decode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    return _this.decodeAlphabet(message, _this.characterSep, _this.wordSep);\n  };\n};\n\n//# sourceURL=webpack:///./src/methods/dictionary/bazeries.js?");

/***/ }),

/***/ "./src/methods/dictionary/dictionary.js":
/*!**********************************************!*\
  !*** ./src/methods/dictionary/dictionary.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _atbash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./atbash.js */ \"./src/methods/dictionary/atbash.js\");\n/* harmony import */ var _autoKey_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./autoKey.js */ \"./src/methods/dictionary/autoKey.js\");\n/* harmony import */ var _baconian_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./baconian.js */ \"./src/methods/dictionary/baconian.js\");\n/* harmony import */ var _bazeries_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bazeries.js */ \"./src/methods/dictionary/bazeries.js\");\n/* harmony import */ var _morse_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./morse.js */ \"./src/methods/dictionary/morse.js\");\n/* harmony import */ var _simpleSubstitution_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./simpleSubstitution.js */ \"./src/methods/dictionary/simpleSubstitution.js\");\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  Atbash: _atbash_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  Autokey: _autoKey_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  Baconian: _baconian_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  Bazeries: _bazeries_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n  Morse: _morse_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n  SimpleSubstitution: _simpleSubstitution_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\n});\n\n//# sourceURL=webpack:///./src/methods/dictionary/dictionary.js?");

/***/ }),

/***/ "./src/methods/dictionary/morse.js":
/*!*****************************************!*\
  !*** ./src/methods/dictionary/morse.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return morse; });\n/* harmony import */ var _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../basicCipher.js */ \"./src/basicCipher.js\");\n\n/**\r\n * Morse code is a character encoding scheme used in telecommunication that encodes text characters as standardized\r\n * sequences of two different signal durations called dots and dashes or dits and dahs.\r\n * Morse code is named for Samuel F. B. Morse, an inventor of the telegraph.\r\n * There are 3 types of alphabets American (Morse), Continental (Gerke) and International (ITU)\r\n * Suitable length: Any since it doesn't really encrypt\r\n * https://en.wikipedia.org/wiki/Morse_code\r\n */\n\nclass morse extends _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(message) {\n    var encoded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var alphabet = {\n      \"-----\": \"0\",\n      \".----\": \"1\",\n      \"..---\": \"2\",\n      \"...--\": \"3\",\n      \"....-\": \"4\",\n      \".....\": \"5\",\n      \"-....\": \"6\",\n      \"--...\": \"7\",\n      \"---..\": \"8\",\n      \"----.\": \"9\",\n      \".-\": \"a\",\n      \"-...\": \"b\",\n      \"-.-.\": \"c\",\n      \"-..\": \"d\",\n      \".\": \"e\",\n      \"..-.\": \"f\",\n      \"--.\": \"g\",\n      \"....\": \"h\",\n      \"..\": \"i\",\n      \".---\": \"j\",\n      \"-.-\": \"k\",\n      \".-..\": \"l\",\n      \"--\": \"m\",\n      \"-.\": \"n\",\n      \"---\": \"o\",\n      \".--.\": \"p\",\n      \"--.-\": \"q\",\n      \".-.\": \"r\",\n      \"...\": \"s\",\n      \"-\": \"t\",\n      \"..-\": \"u\",\n      \"...-\": \"v\",\n      \".--\": \"w\",\n      \"-..-\": \"x\",\n      \"-.--\": \"y\",\n      \"--..\": \"z\",\n      \"/\": \" \",\n      \"-Â·-Â·--\": \"!\",\n      \"Â·-Â·-Â·-\": \".\",\n      \"--Â·Â·--\": \",\"\n    };\n    super(message, encoded, \"morse\", \"\", alphabet);\n\n    _initialiseProps.call(this);\n\n    this.wordSep = \"   \";\n    this.characterSep = \" \"; // Parametros: message,encoded,method,key,alphabet\n    // WE have no key but we do have an alphabet\n    // this.decode.bind(this);\n    // console.log(\"constuctor\",this);\n  }\n  /**\r\n   * @method encode\r\n   * @param {String} message text to use for encoding, if empty use stored message\r\n   */\n\n\n} // export default morse;\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.encode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    return _this.encodeAlphabet(message, _this.characterSep, _this.wordSep);\n  };\n\n  this.decode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    return _this.decodeAlphabet(message, _this.characterSep, _this.wordSep);\n  };\n};\n\n//# sourceURL=webpack:///./src/methods/dictionary/morse.js?");

/***/ }),

/***/ "./src/methods/dictionary/simpleSubstitution.js":
/*!******************************************************!*\
  !*** ./src/methods/dictionary/simpleSubstitution.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return simpleSubstitution; });\n/* harmony import */ var _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../basicCipher.js */ \"./src/basicCipher.js\");\n\n/** This class is the basis for all substitution ciphers. Right now it works with monoalphabetic substitution only.\r\n * In cryptography, a substitution cipher is a method of encrypting by which units of plaintext are replaced with ciphertext.\r\n * According to a fixed system; the \"units\" may be single letters (the most common), pairs of letters, triplets of letters, mixtures of the above, and so forth.\r\n * The receiver deciphers the text by performing the inverse substitution.\r\n * A monoalphabetic cipher uses fixed substitution over the entire message, whereas a polyalphabetic cipher uses a number of substitutions at different positions in the message, where a unit from the plaintext is mapped to one of several possibilities in the ciphertext and vice versa.\r\n * @param {String} message this text is what we want to get encoded/decoded\r\n * @param {String} key a text that is used to generate the alphabet\r\n * @param {Boolean} ij Indicates if \"i\" and \"j\" are to be encoded/decoded as the same letter\r\n * @param {Boolean} uv Indicates if \"u\" and \"v\" are to be encoded/decoded as the same letter\r\n * @param {Boolean} encoded optional value that indicates if the message is already encoded\r\n * @param {Boolean} debug optional value used to show/ debug messages\r\n */\n\nclass simpleSubstitution extends _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(message, key) {\n    var ij = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var uv = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var encoded = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var debug = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    var alphabet = {\n      // The keyword is what modifies the key of this alphabet by using the corresponding constructor\n      a: \"\",\n      b: \"\",\n      c: \"\",\n      d: \"\",\n      e: \"\",\n      f: \"\",\n      g: \"\",\n      h: \"\",\n      i: \"\",\n      j: \"\",\n      k: \"\",\n      l: \"\",\n      m: \"\",\n      n: \"\",\n      o: \"\",\n      p: \"\",\n      q: \"\",\n      r: \"\",\n      s: \"\",\n      t: \"\",\n      u: \"\",\n      v: \"\",\n      w: \"\",\n      x: \"\",\n      y: \"\",\n      z: \"\",\n      \"0\": \"0\",\n      \"1\": \"1\",\n      \"2\": \"2\",\n      \"3\": \"3\",\n      \"4\": \"4\",\n      \"5\": \"5\",\n      \"6\": \"6\",\n      \"7\": \"7\",\n      \"8\": \"8\",\n      \"9\": \"9\",\n      \" \": \" \",\n      \".\": \".\",\n      \",\": \",\",\n      \"?\": \"?\",\n      \"!\": \"!\"\n    };\n    super(message, encoded, \"simpleSubstitution\", key, alphabet, debug);\n\n    _initialiseProps.call(this);\n\n    this.i = ij;\n    this.v = uv;\n    this.key = this.validateKey(key);\n    this.setAlphabet(this.alphabetConstructor(alphabet, this.key));\n    this.wordSep = \" \";\n    this.characterSep = \"\";\n  }\n\n} // export default simpleSubstitution;\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.getI = function () {\n    return _this.i;\n  };\n\n  this.getV = function () {\n    return _this.v;\n  };\n\n  this.validateKey = function (key) {\n    var parsedKey = key.replace(/\\s/g, \"\");\n    parsedKey = parsedKey.toLowerCase();\n    return parsedKey;\n  };\n\n  this.validateRemovedChars = function (index) {\n    var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.i;\n    var v = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this.v;\n    return i === true && index === 106 || v === true && index === 118;\n  };\n\n  this.putLetter2Alphabet = function (letter, usedLetters, refAlphabet, refAlphabetKey) {\n    var alphabet = refAlphabet;\n    var alphabetKey = refAlphabetKey;\n\n    if (!usedLetters.includes(letter) && !_this.validateRemovedChars(letter.charCodeAt(0))) {\n      if (_this.validateRemovedChars(alphabetKey, _this.i, _this.v)) {\n        delete alphabet[String.fromCharCode(alphabetKey)];\n        alphabetKey += 1;\n      }\n\n      alphabet[String.fromCharCode(alphabetKey)] = letter; // Make sure that the keyWordChar used is not used again in case of repettitions.\n\n      usedLetters.push(letter);\n      alphabetKey += 1;\n    }\n\n    return [letter, usedLetters, alphabet, alphabetKey];\n  };\n\n  this.alphabetConstructor = function (alphabet, keyWord) {\n    var usedLetters = []; // letters already used from keyword\n\n    var alphabetKey = 97; // lower case \"a\"\n    // Filter repetitions of letters\n\n    keyWord.split(\"\").forEach(function (keyWordChar) {\n      [keyWordChar, usedLetters, alphabet, alphabetKey] = _this.putLetter2Alphabet(keyWordChar, usedLetters, alphabet, alphabetKey);\n    }); // continue assigning letters until lower case \"z\" 122d\n\n    var letterIndex = 97; // restart with \"a\"\n\n    var letter = \"\";\n\n    do {\n      letter = String.fromCharCode(letterIndex);\n      [letter, usedLetters, alphabet, alphabetKey] = _this.putLetter2Alphabet(letter, usedLetters, alphabet, alphabetKey);\n      letterIndex += 1;\n    } while (alphabetKey < 123); // ASCII for lower case z\n\n\n    return alphabet;\n  };\n\n  this.encode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    return _this.encodeAlphabet(message, _this.characterSep, _this.wordSep);\n  };\n\n  this.decode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    return _this.decodeAlphabet(message, _this.characterSep, _this.wordSep);\n  };\n};\n\n//# sourceURL=webpack:///./src/methods/dictionary/simpleSubstitution.js?");

/***/ }),

/***/ "./src/methods/enigma/enigma.js":
/*!**************************************!*\
  !*** ./src/methods/enigma/enigma.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Enigma; });\n/* harmony import */ var _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../basicCipher.js */ \"./src/basicCipher.js\");\n/* harmony import */ var _rotors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rotors.js */ \"./src/methods/enigma/rotors.js\");\n\n\nclass Enigma extends _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  /* Enigma Machine - German WWII\r\n     \r\n     ttps://en.wikipedia.org/wiki/Enigma_machine\r\n  \n     The Enigma machine is an encryption device developed and used in the early- to mid-20th century to protect commercial, \r\n     diplomatic and military communication. It was employed extensively by Nazi Germany during World War II, in all branches of the German military.\r\n     \r\n     Enigma has an electromechanical rotor mechanism that scrambles the 26 letters of the alphabet. In typical use, \r\n     one person enters text on the Enigmaâ€™s keyboard and another person writes down which of 26 lights above the keyboard \r\n     lights up at each key press. If plain text is entered, the lit-up letters are the encoded ciphertext. \r\n     Entering ciphertext transforms it back into readable plaintext. \r\n  \n     The rotor mechanism changes the electrical connections between the keys and the lights with each keypress.\r\n     The security of the system depends on Enigma machine settings that were changed daily, based on secret key lists distributed in advance, \r\n     and on other settings that change for each message. \r\n     \r\n     Additional info on rotors: https://en.wikipedia.org/wiki/Enigma_rotor_details\r\n     \r\n     The receiving station has to know and use the exact settings employed by the transmitting station to successfully decrypt a message.\r\n     \r\n     PS: One of the most famous encryption \"methods\" ever, it is my pleasure to enclude it in the module. \r\n     Disclaimer: All functions here were based on the works of :http://practicalcryptography.com/ciphers/enigma-cipher/ and adapted to ES6\r\n     and CLass format. Thanks for your work, I couldn't have done this without your code :)\r\n  \n     */\n  constructor(message) {\n    var _this;\n\n    var keySettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'AAA';\n    var ringSettings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'AAA';\n    var plugboardSettings = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'PO ML IU KJ NH YT GB VF RE DC';\n    var rotorSettings = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '123';\n    var encoded = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    var debug = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    super(message, encoded, 'enigma', '', '', debug);\n    _this = this;\n\n    this.initialize = function () {\n      _this.rotorsettings = _this.rotorSettings.replace(/[^1-9]/g, '');\n      _this.keysettings = _this.keySettings.toUpperCase().replace(/[^A-Z]/g, '');\n      _this.ringsettings = _this.ringSettings.toUpperCase().replace(/[^A-Z]/g, '');\n      _this.plugboardsettings = _this.plugboardSettings.toUpperCase().replace(/[^A-Z]/g, '');\n    };\n\n    this.setupPlugboard = function () {\n      var plugboard = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      var parr = plugboard.split('');\n\n      for (var i = 0, j = 1; i < _this.plugboardsettings.length; i += 2, j += 2) {\n        var ichar = plugboard.indexOf(_this.plugboardsettings.charAt(i));\n        var jchar = plugboard.indexOf(_this.plugboardsettings.charAt(j));\n        var temp = parr[jchar];\n        parr[jchar] = parr[ichar];\n        parr[ichar] = temp;\n      }\n\n      plugboard = parr.join('');\n      return plugboard;\n    };\n\n    this.setupKey = function () {\n      var key = _this.keysettings.split('');\n\n      key[0] = _this.code(key[0]);\n      key[1] = _this.code(key[1]);\n      key[2] = _this.code(key[2]);\n      return key;\n    };\n\n    this.setupCode = function () {\n      var ring = _this.ringsettings.split('');\n\n      ring[0] = _this.code(ring[0]);\n      ring[1] = _this.code(ring[1]);\n      ring[2] = _this.code(ring[2]);\n      return ring;\n    };\n\n    this.getRotors = function () {\n      var rotors = _this.rotorsettings.split('');\n\n      rotors[0] = rotors[0].valueOf() - 1;\n      rotors[1] = rotors[1].valueOf() - 1;\n      rotors[2] = rotors[2].valueOf() - 1;\n      return rotors;\n    };\n\n    this.encode = function () {\n      var ciphertext = '';\n\n      var plaintext = _this.message.replace(/[^A-Z]/g, '');\n\n      _this.initialize();\n\n      if (_this.validateSettings(plaintext)) {\n        // interpret the rotor settings (strings 1-8 to int 0-7)\n        var rotors = _this.getRotors(); // parse plugboard settings, store as a simple substitution key\n\n\n        var plugboard = _this.setupPlugboard(); // interpret key and ring settings (convert from letters to numbers 0-25)\n\n\n        var key = _this.setupKey();\n\n        var ring = _this.setupCode(); // do the actual enigma enciphering\n\n\n        var ch = '';\n        var echr = '';\n        plaintext.split('').forEach(function (letter) {\n          ch = letter; // if the current character is not a letter, pass it through unchanged\n\n          if (!ch.match(/[A-Z]/)) {\n            ciphertext += ch; // console.log(ch, \" -> No change\");\n          } else {\n            key = _this.incrementSettings(key, rotors);\n            echr = _this.enigmaChar(ch, key, rotors, ring, plugboard); // console.log(ch, \" -> \", echr);\n\n            ciphertext += echr;\n          }\n        });\n      }\n\n      return ciphertext;\n    };\n\n    this.validateSettings = function (plaintext) {\n      // do some error checking\n      var retorno = true;\n\n      if (plaintext.length < 1) {\n        // alert(\"please enter some plaintext (letters and numbers only)\");\n        retorno = false;\n      }\n\n      if (_this.keysettings.length !== 3) {\n        // alert(\"Key settings must consist of 3 uppercase characters.\");\n        retorno = false;\n      }\n\n      if (_this.ringsettings.length !== 3) {\n        // alert(\"Ring settings must consist of 3 uppercase characters.\");\n        retorno = false;\n      }\n\n      if (_this.plugboardsettings.length > 26) {\n        // alert(\"There cannot be more than 13 pairs in the plugboard settings.\");\n        retorno = false;\n      }\n\n      if (_this.plugboardsettings.length % 2 !== 0) {\n        // alert(\"There must be an even number of characters in the plugboard settings.\");\n        retorno = false;\n      }\n\n      if (_this.rotorsettings.length !== 3) {\n        // alert(\"Rotor settings must consist of 3 numbers 1-9.\");\n        retorno = false;\n      }\n\n      return retorno;\n    };\n\n    this.enigmaChar = function (channel, key, rotors, ring, plugboard) {\n      var ch = channel; // apply plugboard transformation\n\n      ch = _this.simplesub(ch, plugboard); // apply rotor transformations from right to left\n\n      ch = _this.rotor(ch, rotors[2], key[2] - ring[2]);\n      ch = _this.rotor(ch, rotors[1], key[1] - ring[1]);\n      ch = _this.rotor(ch, rotors[0], key[0] - ring[0]); // use reflector B\n\n      ch = _this.simplesub(ch, 'YRUHQSLDPXNGOKMIEBFZCWVJAT'); // apply inverse rotor transformations from left to right\n\n      ch = _this.rotor(ch, rotors[0] + 8, key[0] - ring[0]);\n      ch = _this.rotor(ch, rotors[1] + 8, key[1] - ring[1]);\n      ch = _this.rotor(ch, rotors[2] + 8, key[2] - ring[2]); // apply plugboard transformation again\n\n      ch = _this.simplesub(ch, plugboard);\n      return ch;\n    };\n\n    this.incrementSettings = function (refKey, r) {\n      // notch = [['Q','Q'],['E','E'],['V','V'],['J','J'],['Z','Z'],['Z','M'],['Z','M'],['Z','M']];\n      // The notch array stores the positions at which each rotor kicks over the rotor to its left\n      var key = refKey;\n      var notch = [[16, 16], [4, 4], [21, 21], [9, 9], [25, 25], [25, 12], [25, 12], [25, 12]];\n\n      if (key[1] === notch[r[1]][0] || key[1] === notch[r[1]][1]) {\n        key[0] = (key[0] + 1) % 26;\n        key[1] = (key[1] + 1) % 26;\n      }\n\n      if (key[2] === notch[r[2]][0] || key[2] === notch[r[2]][1]) {\n        key[1] = (key[1] + 1) % 26;\n      }\n\n      key[2] = (key[2] + 1) % 26;\n      return key;\n    };\n\n    this.simplesub = function (ch, key) {\n      return key.charAt(_this.code(ch));\n    };\n\n    this.rotor = function (ch, r, offset) {\n      /* \r\n        There are many versions of the rotors, in a future update I'll include this so that you can recreate other versions of enigma machines.\r\n        The first eight strings represent the rotor substitutions I through VIII (see wiki article for more info), what's instresting is that\r\n        once this class is reworked for better code recycling, you will be able to create your own rotors. \r\n        \r\n        The second 8 are the inverse transformations \r\n        \r\n        */\n      var key = ['EKMFLGDQVZNTOWYHXUSPAIBRCJ', 'AJDKSIRUXBLHWTMCQGZNPYFVOE', 'BDFHJLCPRTXVZNYEIWGAKMUSQO', 'ESOVPZJAYQUIRHXLNFTGKDCMWB', 'VZBRGITYUPSDNHLXAWMJQOFECK', 'JPGVOUMFYQBENHZRDKASXLICTW', 'NZJHGRCXMYSWBOUFAIVLPEKQDT', 'FKQHTLXOCBJSPDZRAMEWNIUYGV', // inverses\n      'UWYGADFPVZBECKMTHXSLRINQOJ', 'AJPCZWRLFBDKOTYUQGENHXMIVS', 'TAGBPCSDQEUFVNZHYIXJWLRKOM', 'HZWVARTNLGUPXQCEJMBSKDYOIF', 'QCYLXWENFTZOSMVJUDKGIARPHB', 'SKXQLHCNWARVGMEBJPTYFDZUIO', 'QMGYVPEDRCWTIANUXFKZOSLHJB', 'QJINSAYDVKBFRUHMCPLEWZTGXO'];\n      /* the following code looks a bit horrible, but it is essentially just doing a simple substitution\r\n          taking into account 16 possible keys (8 rotors and their inverses) and the offset (which is calculated\r\n          from the indicator and ring settings). The offset essentially shifts the rotor key to the left or right\r\n        */\n\n      var chcode = (_this.code(ch) + 26 + offset) % 26;\n      var mapch = (_this.code(key[r].charAt(chcode)) + 26 - offset) % 26 + 65; // console.log(\"Rotor > char: \", ch, \"->\", mapch);\n\n      return String.fromCharCode(mapch);\n    };\n\n    this.code = function (ch) {\n      return ch.toUpperCase().charCodeAt(0) - 65;\n    };\n\n    this.message = message.toUpperCase();\n    this.keySettings = keySettings;\n    this.ringSettings = ringSettings;\n    this.plugboardSettings = plugboardSettings;\n    this.rotorSettings = rotorSettings;\n  }\n\n}\n\n//# sourceURL=webpack:///./src/methods/enigma/enigma.js?");

/***/ }),

/***/ "./src/methods/enigma/rotors.js":
/*!**************************************!*\
  !*** ./src/methods/enigma/rotors.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Rotors; });\nclass Rotors {\n  constructor() {\n    this.inverse = function (rotor) {\n      /* This method takes the rotor and gives the inverse back.\r\n         Example: (RotorSet 4 rotor 3) turns A -> B and if we want to go back from B -> A we need the inverse rotor */\n      var invertedRotor = [];\n      return invertedRotor;\n    };\n\n    this.rotorSet1 = {\n      // Commercial Enigma A B 1924\n      1: ['DMTWSILRUYQNKFEJCAZBPGXOHV'],\n      2: ['HQZGPJTMOBLNCIFDYAWVEUSRKX'],\n      3: ['UQNTLSZFMREHDPXKIBVYGJCWOA']\n    };\n    this.rotorSet2 = {\n      // German Railway (Rocket) 1941\n      1: ['JGDQOXUSCAMIFRVTPNEWKBLZYH'],\n      2: '[NTZPSFBOKMWRCJDIVLAEYUXHGQ]',\n      3: ['JVIUBHTCDYAKEQZPOSGXNRMWFL'],\n      4: ['QYHOGNECVPUZTFDJAXWMKISRBL'],\n      5: ['QWERTZUIOASDFGHJKPYXCVBNML']\n    };\n    this.rotorSet3 = {\n      /* Swiss K \r\n           In 1941 it became known to the Swiss that some of their Enigma traffic was being read by the French. It was decided to make some design modifications.\r\n           One of the modifications consisted in modifying the wheel stepping on the Swiss Army machine. The slow, left-hand wheel was made stationary during operation while the second wheel stepped with every key stroke.\r\n           The third wheel and the UKW would step in the normal fashion with Enigma stepping for the third wheel.\r\n           The stationary but rotatable left-hand wheel was meant to make up for the missing stecker connections on the commercial machine.\r\n           Swiss Army Enigma machines were the only machines modified. The surviving Swiss Air Force machines do not show any signs of modification. Machines used by the diplomatic service apparently were not altered either.\r\n         */\n      'I-K': ['PEZUOHXSCVFMTBGLRINQJWAYDK'],\n      'II-K': ['ZOUESYDKFWPCIQXHMVBLGNJRAT'],\n      'III-K': ['EHRVXGAOBQUSIMZFLYNWKTPDJC'],\n      'UKV-K': ['IMETCGFRAYSQBZXWLHKDVUPOJN'],\n      'ETW-K': ['QWERTZUIOASDFGHJKPYXCVBNML']\n    }; // Default\n\n    this.rotorSet4 = {\n      // I - III Enigma I , IV & V M3 Army , VI - VIII M3 & M4 Naval.\n      1: ['EKMFLGDQVZNTOWYHXUSPAIBRCJ'],\n      2: ['AJDKSIRUXBLHWTMCQGZNPYFVOE'],\n      3: ['BDFHJLCPRTXVZNYEIWGAKMUSQO'],\n      4: ['ESOVPZJAYQUIRHXLNFTGKDCMWB'],\n      5: ['VZBRGITYUPSDNHLXAWMJQOFECK'],\n      6: ['JPGVOUMFYQBENHZRDKASXLICTW'],\n      7: ['NZJHGRCXMYSWBOUFAIVLPEKQDT'],\n      8: ['FKQHTLXOCBJSPDZRAMEWNIUYGV']\n    };\n    this.rotorSet5 = {\n      BETA: ['LEYJVCNIXWPBQMDRTAKZGFUHOS'],\n      GAMMA: ['FSOKANUERHMBTIYCWLQPZXVGJD'],\n      'Reflector A': ['EJMZALYXVBWFCRQUONTSPIKHGD'],\n      'Reflector B': ['YRUHQSLDPXNGOKMIEBFZCWVJAT'],\n      'Reflector C': ['FVPJIAOYEDRZXWGCTKUQSBNMHL'],\n      'Reflector B Thin': ['ENKQAUYWJICOPBLMDXZVFTHRGS'],\n      'Reflector C Thin': ['RDOBJNTKVEHMLFCWZAXGYIPSUQ'],\n      ETW: ['ABCDEFGHIJKLMNOPQRSTUVWXYZ']\n    };\n  }\n\n}\n\n//# sourceURL=webpack:///./src/methods/enigma/rotors.js?");

/***/ }),

/***/ "./src/methods/shift/caesarShift.js":
/*!******************************************!*\
  !*** ./src/methods/shift/caesarShift.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return CaesarShift; });\n/* harmony import */ var _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../basicCipher.js */ \"./src/basicCipher.js\");\n\n/**\r\n * Caesar cipher, also known as Caesar's cipher, the shift cipher, Caesar's code or Caesar shift, \r\n   is one of the simplest and most widely known encryption techniques. \r\n   \r\n   It is a type of substitution cipher in which each letter in the plaintext is replaced by a letter \r\n   some fixed number of positions down the alphabet. \r\n   For example, with a left shift of 3, D would be replaced by A, E would become B, and so on. \r\n   The method is named after Julius Caesar, who used it in his private correspondence.\r\n\r\n    The encryption step performed by a Caesar cipher is often incorporated as part of more complex schemes, \r\n    such as the VigenÃ¨re cipher, and still has modern application in the ROT13 system. \r\n\r\n    As with all single-alphabet substitution ciphers, the Caesar cipher is easily broken and in modern practice \r\n    offers essentially no communications security.\r\n   \r\n   https://en.wikipedia.org/wiki/Caesar_cipher\r\n   \r\n   Note: Since this is a really basic encryption method, it is included in basicCipher class\r\n  @param {String} message this text is what we want to get encoded/decoded\r\n  @param {number} key a number that is used to shift the alphabet\r\n  @param {Boolean} encoded optional value that indicates if the message is already encoded\r\n  @param {Boolean} debug optional value used to show/ debug messages\r\n */\n\nclass CaesarShift extends _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(message, key) {\n    var encoded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    super(message, encoded, \"caesarShift\", key, \"\", debug);\n\n    _initialiseProps.call(this);\n  }\n  /**\r\n   * @method encode\r\n   * @param {String} message text to use for encoding, if empty use stored message\r\n   * @param {number} key key to use for encoding, if empty use stored key\r\n   */\n\n\n}\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.encode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var myKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n    return _this.shiftCharacters(message, myKey);\n  };\n\n  this.decode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var myKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n    return _this.shiftCharacters(message, -myKey);\n  };\n};\n\n//# sourceURL=webpack:///./src/methods/shift/caesarShift.js?");

/***/ }),

/***/ "./src/methods/shift/rot13.js":
/*!************************************!*\
  !*** ./src/methods/shift/rot13.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Rot13; });\n/* harmony import */ var _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../basicCipher.js */ \"./src/basicCipher.js\");\n\nclass Rot13 extends _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(message) {\n    var encoded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super(message, encoded, \"rot13\", 13, \"\", debug);\n\n    _initialiseProps.call(this);\n  }\n  /**\r\n   * @method encode\r\n   * @param {String} message text to use for encoding, if empty use stored message\r\n   * @param {number} key key to use for encoding, if empty use stored key\r\n   */\n\n\n} // export default rot13;\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.encode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var myKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n    return _this.shiftCharacters(message, myKey);\n  };\n\n  this.decode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var myKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n    return _this.shiftCharacters(message, -myKey);\n  };\n};\n\n//# sourceURL=webpack:///./src/methods/shift/rot13.js?");

/***/ }),

/***/ "./src/methods/shift/rot18.js":
/*!************************************!*\
  !*** ./src/methods/shift/rot18.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Rot18; });\n/* harmony import */ var _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../basicCipher.js */ \"./src/basicCipher.js\");\n\nclass Rot18 extends _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(message) {\n    var encoded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super(message, encoded, \"rot18\", 18, \"\", debug);\n\n    _initialiseProps.call(this);\n  }\n  /**\r\n   * @method encode\r\n   * @param {String} message text to use for encoding, if empty use stored message\r\n   * @param {number} key key to use for encoding, if empty use stored key\r\n   */\n\n\n} // export default rot18;\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.encode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var myKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n    return _this.shiftCharacters(message, myKey);\n  };\n\n  this.decode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var myKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n    return _this.shiftCharacters(message, -myKey);\n  };\n};\n\n//# sourceURL=webpack:///./src/methods/shift/rot18.js?");

/***/ }),

/***/ "./src/methods/shift/rot47.js":
/*!************************************!*\
  !*** ./src/methods/shift/rot47.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Rot47; });\n/* harmony import */ var _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../basicCipher.js */ \"./src/basicCipher.js\");\n\nclass Rot47 extends _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(message) {\n    var encoded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super(message, encoded, \"rot47\", 47, \"\", debug);\n\n    _initialiseProps.call(this);\n  }\n  /**\r\n   * @method encode\r\n   * @param {String} message text to use for encoding, if empty use stored message\r\n   * @param {number} key key to use for encoding, if empty use stored key\r\n   */\n\n\n}\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.encode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var myKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n    return _this.shiftCharacters(message, myKey);\n  };\n\n  this.decode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var myKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n    return _this.shiftCharacters(message, -myKey);\n  };\n};\n\n//# sourceURL=webpack:///./src/methods/shift/rot47.js?");

/***/ }),

/***/ "./src/methods/shift/rot5.js":
/*!***********************************!*\
  !*** ./src/methods/shift/rot5.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Rot5; });\n/* harmony import */ var _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../basicCipher.js */ \"./src/basicCipher.js\");\n\nclass Rot5 extends _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(message) {\n    var encoded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super(message, encoded, \"rot5\", 5, \"\", debug);\n\n    _initialiseProps.call(this);\n  }\n  /**\r\n   * @method encode\r\n   * @param {String} message text to use for encoding, if empty use stored message\r\n   * @param {number} key key to use for encoding, if empty use stored key\r\n   */\n\n\n}\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.encode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var myKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n    return _this.shiftCharacters(message, myKey);\n  };\n\n  this.decode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var myKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n    return _this.shiftCharacters(message, -myKey);\n  };\n};\n\n//# sourceURL=webpack:///./src/methods/shift/rot5.js?");

/***/ }),

/***/ "./src/methods/shift/rot7.js":
/*!***********************************!*\
  !*** ./src/methods/shift/rot7.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Rot7; });\n/* harmony import */ var _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../basicCipher.js */ \"./src/basicCipher.js\");\n\nclass Rot7 extends _basicCipher_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(message) {\n    var encoded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super(message, encoded, \"rot7\", 7, \"\", debug);\n\n    _initialiseProps.call(this);\n  }\n  /**\r\n   * @method encode\r\n   * @param {String} message text to use for encoding, if empty use stored message\r\n   * @param {number} key key to use for encoding, if empty use stored key\r\n   */\n\n\n}\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.encode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var myKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n    return _this.shiftCharacters(message, myKey);\n  };\n\n  this.decode = function () {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.message;\n    var myKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n    return _this.shiftCharacters(message, -myKey);\n  };\n};\n\n//# sourceURL=webpack:///./src/methods/shift/rot7.js?");

/***/ }),

/***/ "./src/methods/shift/shift.js":
/*!************************************!*\
  !*** ./src/methods/shift/shift.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _caesarShift_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./caesarShift.js */ \"./src/methods/shift/caesarShift.js\");\n/* harmony import */ var _rot5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rot5.js */ \"./src/methods/shift/rot5.js\");\n/* harmony import */ var _rot7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rot7.js */ \"./src/methods/shift/rot7.js\");\n/* harmony import */ var _rot13_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rot13.js */ \"./src/methods/shift/rot13.js\");\n/* harmony import */ var _rot18_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rot18.js */ \"./src/methods/shift/rot18.js\");\n/* harmony import */ var _rot47_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./rot47.js */ \"./src/methods/shift/rot47.js\");\n/* eslint-disable import/extensions */\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  CaesarShift: _caesarShift_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  Rot5: _rot5_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  Rot7: _rot7_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  Rot13: _rot13_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n  Rot18: _rot18_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n  Rot47: _rot47_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\n});\n\n//# sourceURL=webpack:///./src/methods/shift/shift.js?");

/***/ })

/******/ });